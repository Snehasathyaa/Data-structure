#include <stdio.h>
#include <stdlib.h>

#define MAX 5 // Maximum size of the queue

// Structure for the queue
struct Queue {
    int items[MAX];
    int front;
    int rear;
};

// Function to create and initialize the queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = -1;
    q->rear = -1;
    return q;
}

// Function to check if the queue is full
int isFull(struct Queue* q) {
    return q->rear == MAX - 1;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1 || q->front > q->rear;
}

// Function to add an element to the queue
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot insert %d\n", value);
    } else {
        if (q->front == -1) q->front = 0; // First element
        q->rear++;
        q->items[q->rear] = value;
        printf("Inserted: %d\n", value);
    }
}

// Function to remove an element from the queue
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1; // Indicate empty queue
    } else {
        int value = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            // Reset the queue when all elements are dequeued
            q->front = q->rear = -1;
        }
        printf("Deleted: %d\n", value);
        return value;
    }
}

// Function to display the queue
void displayQueue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; i <= q->rear; i++) {
            printf("%d ", q->items[i]);
        }
        printf("\n");
    }
}

// Main function to test the queue operations
int main() {
    struct Queue* q = createQueue();
    int choice, value;

    do {
        printf("\nQueue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display Queue\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                enqueue(q, value);
                break;
            case 2:
                dequeue(q);
                break;
            case 3:
                displayQueue(q);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 4);

    free(q); // Free the allocated memory for the queue
    return 0;
}
