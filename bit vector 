#include <stdio.h>
#include <stdbool.h>

#define UNIVERSAL_SET_SIZE 26 // Set size: {a, b, ..., z}

// Function to add an element to the set
void addElement(unsigned int *set, char element) {
    if (element >= 'a' && element <= 'z') {
        *set |= (1 << (element - 'a'));
    } else {
        printf("Invalid element! Only 'a' to 'z' are allowed.\n");
    }
}

// Function to remove an element from the set
void removeElement(unsigned int *set, char element) {
    if (element >= 'a' && element <= 'z') {
        *set &= ~(1 << (element - 'a'));
    } else {
        printf("Invalid element! Only 'a' to 'z' are allowed.\n");
    }
}

// Function to compute the union of two sets
unsigned int unionSet(unsigned int set1, unsigned int set2) {
    return set1 | set2;
}

// Function to compute the intersection of two sets
unsigned int intersectionSet(unsigned int set1, unsigned int set2) {
    return set1 & set2;
}

// Function to compute the difference of two sets (set1 - set2)
unsigned int differenceSet(unsigned int set1, unsigned int set2) {
    return set1 & ~set2;
}

// Function to print a set in binary format (always 26 bits)
void printSetBinary(unsigned int set) {
    for (int i = UNIVERSAL_SET_SIZE - 1; i >= 0; i--) {
        printf("%d", (set & (1 << i)) ? 1 : 0);
    }
    printf("\n");
}

int main() {
    unsigned int set1 = 0, set2 = 0; // Initialize sets to empty
    char choice, element;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Add an element to Set 1\n");
        printf("2. Add an element to Set 2\n");
        printf("3. Remove an element from Set 1\n");
        printf("4. Remove an element from Set 2\n");
        printf("5. Display Set 1\n");
        printf("6. Display Set 2\n");
        printf("7. Union of Set 1 and Set 2\n");
        printf("8. Intersection of Set 1 and Set 2\n");
        printf("9. Difference (Set 1 - Set 2)\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf(" %c", &choice);

        switch (choice) {
            case '1':
                printf("Enter the element to add to Set 1 (a-z): ");
                scanf(" %c", &element);
                addElement(&set1, element);
                break;

            case '2':
                printf("Enter the element to add to Set 2 (a-z): ");
                scanf(" %c", &element);
                addElement(&set2, element);
                break;

            case '3':
                printf("Enter the element to remove from Set 1 (a-z): ");
                scanf(" %c", &element);
                removeElement(&set1, element);
                break;

            case '4':
                printf("Enter the element to remove from Set 2 (a-z): ");
                scanf(" %c", &element);
                removeElement(&set2, element);
                break;

            case '5':
                printf("Set 1 in binary: ");
                printSetBinary(set1);
                break;

            case '6':
                printf("Set 2 in binary: ");
                printSetBinary(set2);
                break;

            case '7': {
                unsigned int unionResult = unionSet(set1, set2);
                printf("Union of Set 1 and Set 2 in binary: ");
                printSetBinary(unionResult);
                break;
            }

            case '8': {
                unsigned int intersectionResult = intersectionSet(set1, set2);
                printf("Intersection of Set 1 and Set 2 in binary: ");
                printSetBinary(intersectionResult);
                break;
            }

            case '9': {
                unsigned int differenceResult = differenceSet(set1, set2);
                printf("Difference (Set 1 - Set 2) in binary: ");
                printSetBinary(differenceResult);
                break;
            }

            case '10':
                printf("Exiting program.\n");
                return 0;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
